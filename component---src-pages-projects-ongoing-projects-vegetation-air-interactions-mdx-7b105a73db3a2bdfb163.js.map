{"version":3,"sources":["webpack:///./src/pages/projects/ongoing-projects/vegetation-air-interactions.mdx","webpack:///./src/utilities/ViewportContext.ts","webpack:///./src/hooks/useComponentBox.ts","webpack:///./src/components/mdx/index.ts","webpack:///./src/components/mdx/Section.tsx","webpack:///./src/components/mdx/Link.tsx","webpack:///./src/components/mdx/Button.tsx","webpack:///./src/Layout.tsx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Title","Section","Image","Link","Button","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","size","src","objectFit","objectPosition","alt","className","href","isMDXComponent","defaultViewport","width","height","isMobile","isMobileLandscape","ViewportContext","createContext","getBox","ref","current","getBoundingClientRect","mdxComponents","GenericAppComponents","children","shouldOverrideClassName","Layout","useState","viewport","setViewport","useEffect","handleViewportChange","window","innerWidth","innerHeight","generateViewport","addEventListener","removeEventListener","navBarBoxRef","useRef","navBarBox","componentBox","setComponentBox","handleResize","useCallback","useLayoutEffect","ResizeObserver","resizeObserver","observe","disconnect","useComponentBox","Provider","value","style","zIndex","key","marginTop","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"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","file":"component---src-pages-projects-ongoing-projects-vegetation-air-interactions-mdx-7b105a73db3a2bdfb163.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/seanchok/Documents/Programming/healthy_cities_lab/website/src/Layout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Title = makeShortcode(\"Title\");\nconst Section = makeShortcode(\"Section\");\nconst Image = makeShortcode(\"Image\");\nconst Link = makeShortcode(\"Link\");\nconst Button = makeShortcode(\"Button\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Title mdxType=\"Title\">\n  Mechanisms and applications of vegetation-air interactions in the built\n  environment\n    </Title>\n    <Section mdxType=\"Section\">\nI am an mdx file. And I need content.\n      <p>{`I am now giving it more content.`}</p>\n      <p>{`Is this hot reloading? Close enough. More changes.`}</p>\n      <Image size={300} src={'https://via.placeholder.com/150x100'} objectFit={'cover'} objectPosition={'center'} alt={'name'} mdxType=\"Image\" />\n      <Section className={'bg-cobalt-blue text-white'} mdxType=\"Section\">\n  this is inside another box. this is a{' '}\n  <Link className={'text-white hover:text-white'} href={'https://google.com'} mdxType=\"Link\">\n    link to google\n  </Link>\n      </Section>\n      <Link href={'https://google.com'} mdxType=\"Link\">google.com</Link>\n      <Button mdxType=\"Button\">click me</Button>\n    </Section>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { createContext } from 'react';\n\nexport type Viewport = {\n  width: number;\n  height: number;\n  isMobile: boolean;\n  isMobileLandscape: boolean;\n};\n\nexport const defaultViewport: Viewport = {\n  width: 0,\n  height: 0,\n  isMobile: false,\n  isMobileLandscape: false,\n};\n\nconst smBreakpoint = 480;\n\nexport const generateViewport = (window: Window): Viewport => ({\n  width: window.innerWidth,\n  height: window.innerHeight,\n  isMobile: window.innerWidth < smBreakpoint,\n  isMobileLandscape: window.innerHeight < smBreakpoint,\n});\n\nexport const ViewportContext = createContext<Viewport>(defaultViewport);\n","import { useCallback, useLayoutEffect, useState } from 'react';\n\nconst getBox = (ref: any) => ref?.current?.getBoundingClientRect() || {};\n\nexport const useComponentBox = (ref: any) => {\n  const [componentBox, setComponentBox] = useState(getBox(ref));\n\n  const handleResize = useCallback(() => {\n    if (ref.current) setComponentBox(getBox(ref));\n  }, [ref]);\n\n  useLayoutEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    handleResize();\n\n    // @ts-ignore\n    if (typeof ResizeObserver === 'function') {\n      // @ts-ignore\n      let resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(ref.current);\n\n      return () => {\n        resizeObserver.disconnect(ref.current);\n        resizeObserver = null;\n      };\n    } else {\n      window.addEventListener('componentResize', handleResize);\n\n      return () => {\n        window.removeEventListener('componentResize', handleResize);\n      };\n    }\n  }, [ref.current]);\n\n  return componentBox;\n};\n","import * as GenericAppComponents from '@components/generic/app';\n\nimport { Section } from './Section';\nimport { Link } from './Link';\nimport { Button } from './Button';\n\nexport const mdxComponents = {\n  ...GenericAppComponents,\n  Section,\n  Link,\n  Button,\n};\n","import React, { FC, ReactNode } from 'react';\n\ninterface SectionProps {\n  children: ReactNode;\n  className?: string;\n  shouldOverrideClassName?: boolean;\n}\n\nexport const Section: FC<SectionProps> = ({\n  children,\n  className,\n  shouldOverrideClassName,\n  ...props\n}) => (\n  <div\n    className={shouldOverrideClassName ? `${className}` : `mt-4 ${className}`}\n    {...props}\n  >\n    {children}\n  </div>\n);\n","import React, { FC, ReactNode } from 'react';\n\ninterface LinkProps {\n  children: ReactNode;\n  className?: string;\n  shouldOverrideClassName?: boolean;\n}\n\nexport const Link: FC<LinkProps> = ({\n  children,\n  className,\n  shouldOverrideClassName,\n  ...props\n}) => (\n  <a\n    className={shouldOverrideClassName ? `${className}` : `${className}`}\n    {...props}\n  >\n    {children}\n  </a>\n);\n","import React, { FC, ReactNode } from 'react';\n\ninterface ButtonProps {\n  children: ReactNode;\n  className?: string;\n  shouldOverrideClassName?: boolean;\n}\n\nexport const Button: FC<ButtonProps> = ({\n  children,\n  className,\n  shouldOverrideClassName,\n  ...props\n}) => (\n  <button\n    className={\n      shouldOverrideClassName\n        ? className\n        : `button button-emerald-green ${className}`\n    }\n    {...props}\n  >\n    {children}\n  </button>\n);\n","import React, { FC, useEffect, useRef, useState } from 'react';\n\nimport {\n  defaultViewport,\n  generateViewport,\n  Viewport,\n  ViewportContext,\n} from '@utilities/ViewportContext';\nimport { useComponentBox } from '@hooks/useComponentBox';\n\nimport { MDXProvider } from '@mdx-js/react';\nimport { mdxComponents } from '@components/mdx';\n\nimport { SEO } from '@components/layout';\nimport { Footer, NavBar } from '@components/generic';\nimport { PageContainer } from '@components/layout';\n\nexport const Layout: FC = ({ children }) => {\n  const [viewport, setViewport] = useState<Viewport>(defaultViewport);\n\n  useEffect(() => {\n    const handleViewportChange = () => setViewport(generateViewport(window));\n    window.addEventListener('resize', handleViewportChange);\n    return () => window.removeEventListener('resize', handleViewportChange);\n  }, []);\n\n  const navBarBoxRef = useRef(null);\n  const navBarBox = useComponentBox(navBarBoxRef);\n\n  return (\n    <ViewportContext.Provider value={viewport}>\n      <MDXProvider components={mdxComponents}>\n        <SEO />\n\n        <div className={'text-sm sm:text-base bg-gray-100 text-jet-black'}>\n          <div\n            ref={navBarBoxRef}\n            className={'fixed w-full top-0 left-0 bg-white'}\n            style={{ zIndex: 999 }}\n          >\n            <NavBar />\n          </div>\n\n          <div\n            key={`box-${navBarBox?.height || 0}`}\n            className={'flex flex-col min-h-screen'}\n            style={{ marginTop: navBarBox?.height || 75 }}\n          >\n            <div className={'text-jet-black text-sm md:text-base'}>\n              <PageContainer>{children}</PageContainer>\n            </div>\n\n            <div className={'mt-auto'}>\n              <Footer />\n            </div>\n          </div>\n        </div>\n      </MDXProvider>\n    </ViewportContext.Provider>\n  );\n};\n\nexport default Layout;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}